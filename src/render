#!/bin/bash

# usage: ./render <copy_of_parameters.jl>

# git-pull will complain if parameters.jl is modified

# to monitor progress:
#   watch -n 120 tail -n 40 <destination>/monitor.log

# data are temporarily logged in <logfile_scratch>/{director,monitor,squatter1-N,merge1-M}.log,
# where N=throttle_leaf_nmachines from parameters.jl, and M~throttle_octree_nmachines, and then
# tar'd into <destination>/logs.tar.gz.  manual queries into these log files are informative:
#   tar xzfO <destination>/logs.tar.gz render.log 
#   tar xzfO <destination>/logs.tar.gz | grep "ERROR"
#   tar xzfO <destination>/logs.tar.gz | grep "reading input tile" | wc

# also put in <destination> are
#   set_parameters.jl: a copy of <parameters.jl> specified on the command line
#   calculated_parameters.jl
#   tilebase.cache.yml
#   transform.txt
#   render.log

set -e

export RENDER_PATH=/groups/mousebrainmicro/mousebrainmicro/Software/barycentric3
export LD_LIBRARY_PATH=/usr/local/hdf5/lib:/usr/local/gcc-6.1.0/lib64
export JULIA=/groups/mousebrainmicro/mousebrainmicro/Software/barycentric3/julia-0.5.0/bin/julia

# get vars from parameters.jl file
read -a tmp <<< $($JULIA -L $1 -e "print(destination,' ',shared_scratch,' ',logfile_scratch,' ',delete_scratch,' ',notify_addr,' ',bill_userid,' ',typeof(which_cluster) <: String ? which_cluster : join(which_cluster, ','),' ',throttle_octree_nmachines,' ',throttle_octree_njobs_per_machine,' ',throttle_octree_ncores_per_job,' ',nchannels)")
destination=${tmp[0]}
shared_scratch=${tmp[1]}
logfile_scratch=${tmp[2]}
delete_scratch=${tmp[3]}
notify_addr=${tmp[4]}
bill_userid=${tmp[5]}
which_cluster=${tmp[6]}
throttle_octree_nmachines=${tmp[7]}
throttle_octree_njobs_per_machine=${tmp[8]}
throttle_octree_ncores_per_job=${tmp[9]}
nchannels=${tmp[10]}

# delete <logfile_scratch> and <destination> if they exist
if [ -d $logfile_scratch ] ; then
  echo "deleting logfile_scratch = $logfile_scratch"  >> $logfile_scratch/render.log
  rm -rf $logfile_scratch
fi
mkdir -p $logfile_scratch
if [ -d $destination ] ; then
  echo "deleting destination = $destination" >> $logfile_scratch/render.log
  rm -rf $destination
fi
mkdir -p $destination

date >> $logfile_scratch/render.log
hostname >> $logfile_scratch/render.log

# copy parameters to <destination>
cp $1 $destination/set_parameters.jl

# create a probably-unique job name
jobname=$(cat /dev/urandom | tr -dc 'a-zA-Z' | head -c 7)
echo jobname = $jobname >> $logfile_scratch/render.log

# create the leaf nodes
cmd="$JULIA ${RENDER_PATH}/src/render/src/director.jl $destination/set_parameters.jl $jobname"
echo $cmd &>> $logfile_scratch/render.log
if [ $which_cluster == 'janelia' ]; then
  qsub -A $bill_userid -N $jobname -j y -b y -V -shell n -l h_rt=604800 -l sandy=true -o $logfile_scratch/director.log $cmd
else
  eval $cmd &> $logfile_scratch/director.log
fi

# downsample the octree
noctree_jobs=$((64*$nchannels))

expr="p=addprocs(${throttle_octree_ncores_per_job});
      @everywhere include(\"${destination}/set_parameters.jl\");
      @everywhere include(\"${destination}/calculated_parameters.jl\");
      @everywhere include(\"${RENDER_PATH}/src/render/src/admin.jl\");
      t=time();
      id=parse(Int,ENV[\"SGE_TASK_ID\"]);
      ch=(id-1)%nchannels+1;
      oct=div((id-1)>>3,nchannels)+1;
      oct2=div(id-1,nchannels)%8+1;
      tmp=joinpath(shared_scratch,string(oct),string(oct2));
      if isdir(tmp) 
        merge_output_tiles(shared_scratch, destination, \"default\", \".\"*string(ch-1)*\".\"*file_format,
              string(oct)*\"/\"*string(oct2), true, true, false);
        info(\"merging took \",string(round(Int,time()-t)),\" sec\");
        if delete_scratch==\"as-you-go\"
          info(\"deleting shared_scratch = \",tmp);
          run(\`find \$tmp -name *.\$(string(ch-1)).\$file_format -delete\`);
        end;
      end"
cmd="date;
     hostname;
     $JULIA -e '$expr';
     date;"
echo $cmd &>> $logfile_scratch/render.log
taskid1=1
taskid2=$noctree_jobs
if [ $which_cluster == 'janelia' ]; then
  echo $cmd | qsub -A $bill_userid -N ${jobname}2 -t $taskid1-$taskid2 -tc $throttle_octree_nmachines -pe batch $throttle_octree_ncores_per_job -j y -b n -V \
        -hold_jid $jobname -R yes -l h_rt=604800 -l sandy=true -o $logfile_scratch/merge'$TASK_ID'.log
else
  pcmd="export RENDER_PATH=$RENDER_PATH; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH; export JULIA=$JULIA; export HOSTNAME=$HOSTNAME; export SGE_TASK_ID={}; { $cmd } &> $logfile_scratch/merge{}.log"
  parallel -S $which_cluster -j $throttle_octree_njobs_per_machine $pcmd ::: `seq $taskid1 $taskid2` &>> $logfile_scratch/render.log
fi

expr="p=addprocs(${throttle_octree_ncores_per_job});
      @everywhere include(\"${destination}/set_parameters.jl\");
      @everywhere include(\"${destination}/calculated_parameters.jl\");
      @everywhere include(\"${RENDER_PATH}/src/render/src/admin.jl\");
      t=time();
      id=parse(Int,ENV[\"SGE_TASK_ID\"]);
      ch=(id-64*nchannels-1)%nchannels+1;
      merge_output_tiles(nlevels>1 ? destination : shared_scratch, destination, \"default\",
            \".\"*string(ch-1)*\".\"*file_format, \"\", true, true, false);
      info(\"merging took \",string(round(Int,time()-t)),\" sec\")"
cmd="date;
     hostname;
     $JULIA -e '$expr';
     date;"
echo $cmd &>> $logfile_scratch/render.log
taskid1=$(($noctree_jobs+1))
taskid2=$(($noctree_jobs+$nchannels))
if [ $which_cluster == 'janelia' ]; then
  echo $cmd | qsub -A $bill_userid -N ${jobname}3 -t $taskid1-$taskid2 -pe batch $throttle_octree_ncores_per_job -j y -b n -V \
        -hold_jid ${jobname}2 -R yes -l h_rt=604800 -l sandy=true -o $logfile_scratch/merge'$TASK_ID'.log
else
  pcmd="export RENDER_PATH=$RENDER_PATH; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH; export JULIA=$JULIA; export HOSTNAME=$HOSTNAME; export SGE_TASK_ID={}; { $cmd } &> $logfile_scratch/merge{}.log"
  parallel -S $which_cluster -j $throttle_octree_njobs_per_machine $pcmd ::: `seq $taskid1 $taskid2` &>> $logfile_scratch/render.log
fi

# delete shared_scratch
cmd="date;
     hostname;
     df -h $shared_scratch;
     echo deleting shared_scratch = $shared_scratch;
     rm -rf $shared_scratch;
     echo ./savelogs $destination | mail -s \"job $jobname finished\" $notify_addr;
     date"
echo $cmd &>> $logfile_scratch/render.log
if [ $which_cluster == 'janelia' ]; then
  echo $cmd | qsub -A $bill_userid -N ${jobname}4 -j y -b n -V \
        -hold_jid ${jobname}3 -l sandy=true \
        -o $logfile_scratch/render.log -m e -M $notify_addr
else
  eval $cmd &>> $logfile_scratch/render.log
fi

# email user
echo watch -n 60 tail -n '$((LINES-2))' $logfile_scratch/monitor.log | mail -s "job $jobname started" $notify_addr

# start the monitor process
nohup sh -c "sleep 10; ${RENDER_PATH}/src/render/src/monitor $jobname $destination/set_parameters.jl &> ${logfile_scratch}/monitor.log" 2>/dev/null &

date >> $logfile_scratch/render.log
