#!/bin/bash

# usage: ./render <copy_of_parameters.jl>

# git-pull will complain if parameters.jl is modified

# to monitor progress:
#   watch -n 120 tail -n 40 <destination>/monitor.log

# data are temporarily logged in <logfile_scratch>/{director,monitor,squatter1-N,merge1-M}.log,
# where N=throttle_leaf_nmachines from parameters.jl, and M~throttle_octree_njobs, and then
# tar'd into <destination>/logs.tar.gz.  manual queries into these log files are informative:
#   tar xzfO <destination>/logs.tar.gz render.log 
#   tar xzfO <destination>/logs.tar.gz | grep "ERROR"
#   tar xzfO <destination>/logs.tar.gz | grep "reading input tile" | wc

# also put in <destination> are
#   set_parameters.jl: a copy of <parameters.jl> specified on the command line
#   calculated_parameters.jl
#   tilebase.cache.yml
#   transform.txt
#   render.log

export RENDER_PATH=/groups/mousebrainmicro/mousebrainmicro/Software/barycentric4
export LD_LIBRARY_PATH=/groups/mousebrainmicro/mousebrainmicro/Software/barycentric4/env/lib:/usr/local/hdf5/lib:/usr/local/gcc-6.1.0/lib64
export JULIA=/groups/mousebrainmicro/mousebrainmicro/Software/barycentric4/julia-0.6.0/bin/julia

umask 002

# get vars from parameters.jl file
expr="include(\"${RENDER_PATH}/src/render/src/admin.jl\");
      tiles = TileBaseOpen(source);
      tile_shape = TileShape(TileBaseIndex(tiles,1));
      nchannels = ndshapeJ(tile_shape)[4];
      print(join([destination,shared_scratch,logfile_scratch,delete_scratch,notify_addr,bill_userid,
            typeof(which_cluster) <: String ? which_cluster : join(which_cluster, ','),
            throttle_octree_njobs,throttle_octree_njobs_per_machine,throttle_octree_ncores_per_job,
            nchannels,short_queue],' '))"
read -a tmp <<< $($JULIA -L $1 -e "$expr")
destination=${tmp[0]}
shared_scratch=${tmp[1]}
logfile_scratch=${tmp[2]}
delete_scratch=${tmp[3]}
notify_addr=${tmp[4]}
bill_userid=${tmp[5]}
which_cluster=${tmp[6]}
throttle_octree_njobs=${tmp[7]}
throttle_octree_njobs_per_machine=${tmp[8]}
throttle_octree_ncores_per_job=${tmp[9]}
nchannels=${tmp[10]}
short_queue=${tmp[11]}

if [ "$short_queue" = "true" ] ; then
  time_limit=60   # an hour
else
  time_limit=10080  # a week
fi

# delete <logfile_scratch> and <destination> if they exist
if [ -d $logfile_scratch ] ; then
  echo "deleting logfile_scratch = $logfile_scratch" >> $logfile_scratch/render.log
  rm -rf $logfile_scratch
fi
mkdir -p $logfile_scratch
if [ -d $destination ] ; then
  echo "deleting destination = $destination" >> $logfile_scratch/render.log
  rm -rf $destination
fi
mkdir -p $destination

date >> $logfile_scratch/render.log
hostname >> $logfile_scratch/render.log

# copy parameters to <destination>
cp $1 $destination/set_parameters.jl
chmod g+rw $destination/set_parameters.jl

# create a probably-unique job name
jobname=$(cat /dev/urandom | tr -dc 'a-zA-Z' | head -c 7)
echo jobname = $jobname >> $logfile_scratch/render.log

# create the leaf nodes
cmd="umask 002;
     $JULIA ${RENDER_PATH}/src/render/src/director.jl $destination/set_parameters.jl $jobname"
echo $cmd &>> $logfile_scratch/render.log
if [ $which_cluster == 'janelia' ]; then
  echo $cmd | bsub -P $bill_userid -J $jobname -W $time_limit \
        -o $logfile_scratch/director.log
else
  eval $cmd &> $logfile_scratch/director.log
fi

# get nlevels from calculated_parameters.jl file
while [ ! -f ${destination}/calculated_parameters.jl ]; do sleep 2; done
expr="include(joinpath(destination,\"calculated_parameters.jl\"));
      print(nlevels)"
read -a tmp <<< $($JULIA -L $1 -e "$expr")
nlevels=${tmp[0]}

# downsample the octree
if [ "$nlevels" -gt "2" ]; then
  expr="p=addprocs(${throttle_octree_ncores_per_job});
        @everywhere include(\"${destination}/set_parameters.jl\");
        @everywhere include(\"${destination}/calculated_parameters.jl\");
        @everywhere include(\"${RENDER_PATH}/src/render/src/admin.jl\");
        t=time();
        id=parse(Int,ENV[\"LSB_JOBINDEX\"]);
        oct1,oct2,oct3 = ((id-1)&0x1c0)>>6+1, ((id-1)&0x38)>>3+1, ((id-1)&0x7)+1;
        if isdir(joinpath(shared_scratch,string(oct1),string(oct2),string(oct3)))
          merge_output_tiles(shared_scratch, destination, \"default\", file_format,
                string(oct1)*\"/\"*string(oct2)*\"/\"*string(oct3),
                true, true, delete_scratch==\"as-you-go\" ? true : false);
          info(\"merging took \",string(round(Int,time()-t)),\" sec\");
        end;
        rmprocs(p);"
  cmd="umask 002;
       date;
       hostname;
       $JULIA -e '$expr';
       date;"
  echo $cmd &>> $logfile_scratch/render.log
  if [ $which_cluster == 'janelia' ]; then
    echo $cmd | bsub -P $bill_userid -J ${jobname}2[1-512]%${throttle_octree_njobs} \
          -n $throttle_octree_ncores_per_job \
          -w "done($jobname)" -W $time_limit -o $logfile_scratch/merge%I.log
  else
    pcmd="export RENDER_PATH=$RENDER_PATH;
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH;
          export JULIA=$JULIA;
          export HOSTNAME=$HOSTNAME;
          export LSB_JOBINDEX={};
          { $cmd } &> ${logfile_scratch}/merge{}.log"
    parallel -S $which_cluster -j $throttle_octree_njobs_per_machine $pcmd ::: `seq 1 512` &>> $logfile_scratch/render.log
  fi
  hold="-w done(${jobname}2)"
else
  hold="-w done($jobname)"
fi

expr="p=addprocs(${throttle_octree_ncores_per_job});
      @everywhere include(\"${destination}/set_parameters.jl\");
      @everywhere include(\"${destination}/calculated_parameters.jl\");
      @everywhere include(\"${RENDER_PATH}/src/render/src/admin.jl\");
      t=time();
      merge_output_tiles(nlevels>2 ? destination : shared_scratch, destination, \"default\", file_format,
            \"\", true, true, delete_scratch==\"as-you-go\" ? true : false);
      info(\"merging took \",string(round(Int,time()-t)),\" sec\");
      rmprocs(p);"
cmd="umask 002;
     date;
     hostname;
     $JULIA -e '$expr';
     date;"
echo $cmd &>> $logfile_scratch/render.log
if [ $which_cluster == 'janelia' ]; then
  echo $cmd | bsub -P $bill_userid -J ${jobname}3 \
        -n $throttle_octree_ncores_per_job \
        $hold -W $time_limit -o $logfile_scratch/merge513.log
else
  pcmd="export RENDER_PATH=$RENDER_PATH;
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH;
        export JULIA=$JULIA;
        export HOSTNAME=$HOSTNAME;
        { $cmd } &> ${logfile_scratch}/merge513.log"
  ssh ${which_cluster%%,*} $pcmd  &>> $logfile_scratch/render.log
fi

# delete shared_scratch
if [ $delete_scratch != 'never' ]; then
  cmd="date;
       hostname;
       df -h $shared_scratch;
       echo deleting shared_scratch = $shared_scratch;
       rm -rf $shared_scratch;
       echo ./savelogs $destination | mail -s \"job $jobname finished\" $notify_addr;
       date"
  echo $cmd &>> $logfile_scratch/render.log
  if [ $which_cluster == 'janelia' ]; then
    echo $cmd | bsub -P $bill_userid -J ${jobname}4 \
          -w "done(${jobname}3)" -W $time_limit \
          -o $logfile_scratch/render.log
          #-m e -M $notify_addr
  else
    eval $cmd &>> $logfile_scratch/render.log
  fi
fi

# email user
echo watch -n 60 tail -n '$((LINES-2))' $logfile_scratch/monitor.log | mail -s "job $jobname started" $notify_addr

# start the monitor process
nohup sh -c "sleep 60; ${RENDER_PATH}/src/render/src/monitor $jobname $destination/set_parameters.jl &> ${logfile_scratch}/monitor.log" 2>/dev/null &

date >> $logfile_scratch/render.log
