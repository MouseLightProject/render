#!/bin/bash

# usage: merge <source1> <source2> ... <sourceN> <destination>

set -e

export RENDER_PATH=/groups/mousebrainmicro/mousebrainmicro/Software/barycentric3
export LD_LIBRARY_PATH=/usr/local/cuda-7.0/lib64:/usr/local/gcc-6.1.0/lib64
export JULIA=/groups/mousebrainmicro/mousebrainmicro/Software/barycentric3/julia-0.5.0/bin/julia

# get vars from parameters.jl file
read -a tmp <<< $($JULIA -L $1/set_parameters.jl -e "print(bill_userid,' ',typeof(which_cluster) <: String ? which_cluster : join(which_cluster, ','),' ',throttle_octree_nmachines,' ',throttle_octree_njobs_per_machine,' ',throttle_octree_ncores_per_job,' ',nchannels)")
bill_userid=${tmp[0]}
which_cluster=${tmp[1]}
throttle_octree_nmachines=${tmp[2]}
throttle_octree_njobs_per_machine=${tmp[3]}
throttle_octree_ncores_per_job=${tmp[4]}
nchannels=${tmp[5]}

# create a probably-unique job name
jobname=$(cat /dev/urandom | tr -dc 'a-zA-Z' | head -c 7)

# check that all source parameters are equal
for i in $(seq 1 $(($#-1))) ; do
  du -sh ${!i}
  params=$($JULIA -L ${!i}/calculated_parameters.jl -e "print(nlevels,shape_leaf_px,voxelsize_used_um,tile_type)")
  if [ -z ${first_params+x} ] ; then
    first_params=$params
  else
    if [ $params != $first_params ] ; then
      echo ERROR: parameters from source directories are not all equal
      exit 1
    fi
  fi
done

# delete <destination> if it exists
if [ -d ${@: -1} ] ; then
  echo "deleting destination = ${@: -1}"
  rm -rf ${@: -1}
fi
mkdir -p ${@: -1}/merge
df -h ${@: -1}

# do it
sources=$(printf "\"%s\", " ${@:1:(($#-1))})

noctree_jobs=$((64*$nchannels))

expr="p=addprocs(${throttle_octree_ncores_per_job});
      @everywhere include(\"$1/set_parameters.jl\");
      @everywhere include(\"$1/calculated_parameters.jl\");
      @everywhere include(\"${RENDER_PATH}/src/render/src/admin.jl\");
      id=int(ENV[\"SGE_TASK_ID\"]);
      ch=(id-1)%nchannels+1;
      oct=div((id-1)>>3,nchannels)+1;
      oct2=div(id-1,nchannels)%8+1;
      merge_output_tiles([${sources%%, }], \"${@: -1}\", \"default\", \".\"*string(ch-1)*\".\"file_format,
            string(oct)*\"/\"*string(oct2), true, false, false);
      rmprocs(p)"
cmd="date;
     hostname;
     $JULIA -e '$expr';
     date"
echo $cmd
taskid1=1
taskid2=$noctree_jobs
if [ $which_cluster == 'janelia' ]; then
  echo $cmd | qsub -A $bill_userid -N $jobname -t $taskid1-$taskid2 -tc $throttle_octree_nmachines -pe batch $throttle_octree_ncores_per_job -j y -b n -V \
        -l sandy=true -o ${@: -1}/merge/'$TASK_ID'.log
else
  pcmd="export RENDER_PATH=$RENDER_PATH; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH; export JULIA=$JULIA; export SGE_TASK_ID={#}; { $cmd } &> ${@: -1}/merge/{#}.log"
  parallel -S $which_cluster -j $throttle_octree_njobs_per_machine $pcmd ::: `seq taskid1 $taskid2`
fi

expr="p=addprocs(${throttle_octree_ncores_per_job});
      @everywhere include(\"$1/set_parameters.jl\");
      @everywhere include(\"$1/calculated_parameters.jl\");
      @everywhere include(\"${RENDER_PATH}/src/render/src/admin.jl\");
      id=int(ENV[\"SGE_TASK_ID\"]);
      ch=(id-64*nchannels-1)%nchannels+1;
      oct=div(id-64*nchannels-1,nchannels)+1;
      merge_output_tiles([${sources%%, }], \"${@: -1}\", \"default\", \".\"*string(ch-1)*\".\"file_format,
            string(oct), false, false, false);
      rmprocs(p)"
cmd="date;
     hostname;
     $JULIA -e '$expr';
     date"
echo $cmd
taskid1=$(($noctree_jobs+1))
taskid2=$(($noctree_jobs+8*$nchannels))
if [ $which_cluster == 'janelia' ]; then
  echo $cmd | qsub -A $bill_userid -N $jobname -t $taskid1-$taskid2 -pe batch $throttle_octree_ncores_per_job -j y -b n -V \
        -l sandy=true -o ${@: -1}/merge/'$TASK_ID'.log
else
  pcmd="export RENDER_PATH=$RENDER_PATH; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH; export JULIA=$JULIA; export SGE_TASK_ID={#}; { $cmd } &> ${@: -1}/merge/{#}.log"
  parallel -S $which_cluster -j $throttle_octree_njobs_per_machine $pcmd ::: `seq $taskid1 $taskid2`
fi

expr="p=addprocs(${throttle_octree_ncores_per_job});
      @everywhere include(\"$1/set_parameters.jl\");
      @everywhere include(\"$1/calculated_parameters.jl\");
      @everywhere include(\"${RENDER_PATH}/src/render/src/admin.jl\");
      id=int(ENV[\"SGE_TASK_ID\"]);
      ch=(id-(64+8)*nchannels-1)%nchannels+1;
      merge_output_tiles([${sources%%, }], \"${@: -1}\", \"default\", \".\"*string(ch-1)*\".\"*file_format, \"\",
            false, false, false);
      rmprocs(p)"
cmd="date;
     hostname;
     $JULIA -e '$expr';
     date"
echo $cmd
taskid1=$(($noctree_jobs+8*$nchannels+1))
taskid2=$(($noctree_jobs+8*$nchannels+$nchannels))
if [ $which_cluster == 'janelia' ]; then
  echo $cmd | qsub -A $bill_userid -N $jobname -t $taskid1-$taskid2 -pe batch $throttle_octree_ncores_per_job -j y -b n -V \
        -l sandy=true -o ${@: -1}/merge/'$TASK_ID'.log
else
  pcmd="export RENDER_PATH=$RENDER_PATH; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH; export JULIA=$JULIA; export SGE_TASK_ID={#}; { $cmd } &> ${@: -1}/merge/{#}.log"
  parallel -S $which_cluster -j $throttle_octree_njobs_per_machine $pcmd ::: `seq $taskid1 $taskid2`
fi

#cmd="date;
#     hostname;
#     chmod -R a-w ${@: -1};
#     date"
#echo $cmd
#if [ $which_cluster_octree == 'janelia' ]; then
#  echo $cmd | qsub -A $bill_userid -N ${jobname}2 -j y -b n -V \
#        -l sandy=true -hold_jid $jobname -o ${@: -1}/merge/write-protect.log
#else
#  eval $cmd &> ${@: -1}/merge/write-protect.log
#fi

# copy metadata and log files
cp $1/*.{jl,yml,txt}  ${@: -1}
for i in $(seq 1 $(($#-1))) ; do
  mkdir -p ${@: -1}/source$i
  cp ${!i}/*.{jl,yml,txt}  ${@: -1}/source$i
  if [ -e ${!i}/*.gz ] ; then
    cp ${!i}/*.gz  ${@: -1}/source$i
  fi
done
