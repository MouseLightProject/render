#!/bin/bash

# usage: ./render <copy_of_parameters.jl>

# git-pull will complain if parameters.jl is modified

# to monitor progress:
#   watch -n 120 tail -n 40 <destination>/monitor.log

# data are temporarily logged in <logfile_scratch>/{director,monitor,squatter1-N,merge1-130}.log,
# where N=nnodes from parameters.jl, and then tar'd into <destination>/logs.tar.gz.
# manual queries into these log files are informative:
#   tar xzfO <destination>/logs.tar.gz render.log 
#   tar xzfO <destination>/logs.tar.gz | grep "ERROR"
#   tar xzfO <destination>/logs.tar.gz | grep "reading input tile" | wc

# also put in <destination> are
#   set_parameters.jl: a copy of <parameters.jl> specified on the command line
#   calculated_parameters.jl
#   tilebase.cache.yml
#   transform.txt
#   render.log

set -e

#export RENDER_PATH=/groups/mousebrainmicro/mousebrainmicro/Software/barycentric
export RENDER_PATH=/home/arthurb/projects/mouselight
export LD_LIBRARY_PATH=/usr/local/cuda-7.0/lib64
export JULIA=/usr/local/julialang-0.3.8/bin/julia

# get vars from parameters.jl file
read -a tmp <<< $($JULIA -L $1 -e "print(destination,' ',shared_scratch,' ',logfile_scratch,' ',delete_scratch,' ',notify_addr,' ',bill_userid)")
destination=${tmp[0]}
shared_scratch=${tmp[1]}
logfile_scratch=${tmp[2]}
delete_scratch=${tmp[3]}
notify_addr=${tmp[4]}
bill_userid=${tmp[5]}

# delete <logfile_scratch> and <destination> if they exist
if [ -d $logfile_scratch ] ; then
  echo "deleting logfile_scratch = $logfile_scratch"  #>> $logfile_scratch/render.log
  rm -rf $logfile_scratch
fi
mkdir -p $logfile_scratch
if [ -d $destination ] ; then
  echo "deleting destination = $destination" >> $logfile_scratch/render.log
  rm -rf $destination
fi
mkdir -p $destination

date >> $logfile_scratch/render.log
hostname >> $logfile_scratch/render.log

# copy parameters to <destination>
cp $1 $destination/set_parameters.jl

# create a probably-unique job name
jobname=$(cat /dev/urandom | tr -dc 'a-zA-Z' | head -c 7)
echo jobname = $jobname >> $logfile_scratch/render.log

# create the leaf nodes
cmd="$JULIA ${RENDER_PATH}/src/render/director.jl $destination/set_parameters.jl $jobname"
qsub -A $bill_userid -N $jobname -j y -b y -V -shell n -l sandy=true -o $logfile_scratch/director.log $cmd

# downsample the octree
expr="t=time();
      id=int(ENV[\"SGE_TASK_ID\"]);
      ch=(id-1)%2+1;
      oct=(id-1)>>4+1;
      oct2=((id-1)>>1)%8+1;
      tmp=joinpath(shared_scratch,string(oct),string(oct2));
      if isdir(tmp) 
        merge_output_tiles(shared_scratch, destination, \"default\", \".\"*string(ch-1)*\".tif\",
              string(oct)*\"/\"*string(oct2), true, true, false);
        info(\"merging took \",string(iround(time()-t)),\" sec\");
        if delete_scratch==\"as-you-go\"
          info(\"deleting shared_scratch = \",tmp);
          run(\`find \$tmp -name *.\$(string(ch-1)).tif -delete\`);
        end;
      end"
cmd="date;
     hostname;
     $JULIA -L $destination/set_parameters.jl -L $destination/calculated_parameters.jl
            -L ${RENDER_PATH}/src/render/admin.jl -e '$expr';
     date"
echo $cmd | qsub -A $bill_userid -N ${jobname}2 -t 1:128 -tc 32 -pe batch 9 -j y -b n -V \
      -hold_jid $jobname -l sandy=true -o $logfile_scratch/merge'$TASK_ID'.log

expr="t=time();
      id=int(ENV[\"SGE_TASK_ID\"]);
      ch=(id-129)%2+1;
      merge_output_tiles(nlevels>2 ? destination : shared_scratch, destination, \"default\",
            \".\"*string(ch-1)*\".tif\", \"\", true, true, false);
      info(\"merging took \",string(iround(time()-t)),\" sec\")"
cmd="date;
     hostname;
     $JULIA -L $destination/set_parameters.jl -L $destination/calculated_parameters.jl
            -L ${RENDER_PATH}/src/render/admin.jl -e '$expr';
     date"
echo $cmd | qsub -A $bill_userid -N ${jobname}3 -t 129:130 -pe batch 9 -j y -b n -V \
      -hold_jid ${jobname}2 -l sandy=true -o $logfile_scratch/merge'$TASK_ID'.log

# delete shared_scratch
cmd="date;
     hostname;
     df -h $shared_scratch;
     echo deleting shared_scratch = $shared_scratch;
     rm -rf $shared_scratch;
     echo ./savelogs $destination | mail -s \"job $jobname finished\" $notify_addr;
     date"
echo $cmd | qsub -A $bill_userid -N ${jobname}4 -j y -b n -V \
      -hold_jid ${jobname}3 -l sandy=true \
      -o $logfile_scratch/render.log -m e -M $notify_addr

# email user
echo watch -n 60 tail -n '$((LINES-2))' $logfile_scratch/monitor.log | mail -s "job $jobname started" $notify_addr

# start the monitor process
nohup sh -c "sleep 10; ${RENDER_PATH}/src/render/monitor $jobname $destination/set_parameters.jl &> ${logfile_scratch}/monitor.log" 2>/dev/null &

date >> $logfile_scratch/render.log
